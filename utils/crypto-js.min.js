/**
 * 简化版的CryptoJS，用于小程序中的签名计算
 * 只包含SHA256和HmacSHA256功能
 */

var CryptoJS = CryptoJS || (function (Math, undefined) {
  var C = {};
  var C_lib = C.lib = {};
  var WordArray = C_lib.WordArray = {
    init: function (words, sigBytes) {
      words = this.words = words || [];
      if (sigBytes != undefined) {
        this.sigBytes = sigBytes;
      } else {
        this.sigBytes = words.length * 4;
      }
    },
    toString: function (encoder) {
      return (encoder || Hex).stringify(this);
    },
    concat: function (wordArray) {
      var thisWords = this.words;
      var thatWords = wordArray.words;
      var thisSigBytes = this.sigBytes;
      var thatSigBytes = wordArray.sigBytes;
      this.clamp();
      if (thisSigBytes % 4) {
        for (var i = 0; i < thatSigBytes; i++) {
          var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
          thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);
        }
      } else if (thatWords.length > 0xffff) {
        for (var i = 0; i < thatSigBytes; i += 4) {
          thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];
        }
      } else {
        thisWords.push.apply(thisWords, thatWords);
      }
      this.sigBytes += thatSigBytes;
      return this;
    },
    clamp: function () {
      var words = this.words;
      var sigBytes = this.sigBytes;
      words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);
      words.length = Math.ceil(sigBytes / 4);
    }
  };

  var C_enc = C.enc = {};
  var Hex = C_enc.Hex = {
    stringify: function (wordArray) {
      var words = wordArray.words;
      var sigBytes = wordArray.sigBytes;
      var hexChars = [];
      for (var i = 0; i < sigBytes; i++) {
        var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
        hexChars.push((bite >>> 4).toString(16));
        hexChars.push((bite & 0x0f).toString(16));
      }
      return hexChars.join('');
    }
  };

  var Latin1 = C_enc.Latin1 = {
    stringify: function (wordArray) {
      var words = wordArray.words;
      var sigBytes = wordArray.sigBytes;
      var latin1Chars = [];
      for (var i = 0; i < sigBytes; i++) {
        var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;
        latin1Chars.push(String.fromCharCode(bite));
      }
      return latin1Chars.join('');
    },
    parse: function (latin1Str) {
      var latin1StrLength = latin1Str.length;
      var words = [];
      for (var i = 0; i < latin1StrLength; i++) {
        words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);
      }
      return WordArray.init(words, latin1StrLength);
    }
  };

  var Utf8 = C_enc.Utf8 = {
    stringify: function (wordArray) {
      try {
        return decodeURIComponent(escape(Latin1.stringify(wordArray)));
      } catch (e) {
        throw new Error('Malformed UTF-8 data');
      }
    },
    parse: function (utf8Str) {
      return Latin1.parse(unescape(encodeURIComponent(utf8Str)));
    }
  };

  var C_algo = C.algo = {};
  var SHA256 = C_algo.SHA256 = {
    _doReset: function () {
      this._hash = WordArray.init([
        0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
        0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
      ]);
    },
    _doProcessBlock: function (M, offset) {
      var H = this._hash.words;
      var a = H[0]; var b = H[1]; var c = H[2]; var d = H[3];
      var e = H[4]; var f = H[5]; var g = H[6]; var h = H[7];
      var W = [];
      for (var i = 0; i < 64; i++) {
        if (i < 16) {
          W[i] = M[offset + i] | 0;
        } else {
          var gamma0x = W[i - 15];
          var gamma0 = ((gamma0x << 25) | (gamma0x >>> 7)) ^
                      ((gamma0x << 14) | (gamma0x >>> 18)) ^
                      (gamma0x >>> 3);
          var gamma1x = W[i - 2];
          var gamma1 = ((gamma1x << 15) | (gamma1x >>> 17)) ^
                      ((gamma1x << 13) | (gamma1x >>> 19)) ^
                      (gamma1x >>> 10);
          W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];
        }
        var ch = (e & f) ^ (~e & g);
        var maj = (a & b) ^ (a & c) ^ (b & c);
        var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));
        var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7) | (e >>> 25));
        var K = [
          0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
          0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
          0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
          0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
          0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
          0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
          0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
          0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
        ];
        var t1 = h + sigma1 + ch + K[i] + W[i];
        var t2 = sigma0 + maj;
        h = g; g = f; f = e; e = (d + t1) | 0; d = c; c = b; b = a; a = (t1 + t2) | 0;
      }
      H[0] = (H[0] + a) | 0; H[1] = (H[1] + b) | 0; H[2] = (H[2] + c) | 0; H[3] = (H[3] + d) | 0;
      H[4] = (H[4] + e) | 0; H[5] = (H[5] + f) | 0; H[6] = (H[6] + g) | 0; H[7] = (H[7] + h) | 0;
    },
    _doFinalize: function () {
      var data = this._data;
      var dataWords = data.words;
      var nBitsTotal = this._nDataBytes * 8;
      var nBitsLeft = data.sigBytes * 8;
      dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);
      dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);
      dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;
      data.sigBytes = dataWords.length * 4;
      this._process();
      return this._hash;
    }
  };

  // 创建SHA256函数
  C.SHA256 = function (message) {
    var hasher = Object.create(SHA256);
    hasher._data = WordArray.init();
    hasher._nDataBytes = 0;
    hasher._doReset();
    
    if (typeof message === 'string') {
      message = Utf8.parse(message);
    }
    
    hasher._data.concat(message);
    hasher._nDataBytes += message.sigBytes;
    
    // 简化的process方法
    var data = hasher._data;
    var dataWords = data.words;
    var dataSigBytes = data.sigBytes;
    var blockSize = 16;
    var nBlocksReady = dataSigBytes / (blockSize * 4);
    nBlocksReady = nBlocksReady > 0 ? Math.floor(nBlocksReady) : 0;
    var nWordsReady = nBlocksReady * blockSize;
    if (nWordsReady) {
      for (var offset = 0; offset < nWordsReady; offset += blockSize) {
        hasher._doProcessBlock(dataWords, offset);
      }
      var processedWords = dataWords.splice(0, nWordsReady);
      data.sigBytes -= nWordsReady * 4;
    }
    
    return hasher._doFinalize();
  };

  // 创建HmacSHA256函数
  C.HmacSHA256 = function (message, key) {
    if (typeof key === 'string') {
      key = Utf8.parse(key);
    }
    if (typeof message === 'string') {
      message = Utf8.parse(message);
    }
    
    var keyWords = key.words;
    var keySize = key.sigBytes;
    var blockSize = 16;
    
    if (keySize > blockSize * 4) {
      key = C.SHA256(key);
      keyWords = key.words;
      keySize = key.sigBytes;
    }
    
    var oKeyPad = WordArray.init();
    var iKeyPad = WordArray.init();
    oKeyPad.words = []; iKeyPad.words = [];
    oKeyPad.sigBytes = iKeyPad.sigBytes = blockSize * 4;
    
    for (var i = 0; i < blockSize; i++) {
      var keyWord = keyWords[i] || 0;
      oKeyPad.words[i] = keyWord ^ 0x5c5c5c5c;
      iKeyPad.words[i] = keyWord ^ 0x36363636;
    }
    
    var innerHash = C.SHA256(iKeyPad.concat(message));
    return C.SHA256(oKeyPad.concat(innerHash));
  };

  return C;
}(Math));

module.exports = CryptoJS;
